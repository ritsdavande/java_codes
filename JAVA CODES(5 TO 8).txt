EXPERIMENT NO 05
import java.util.Arrays;

public class MulticlassClassification {
    
    // Function to classify based on features (dummy example)
    public static String classify(double[] features) {
        // This is a basic classifier with 3 classes: Class A, B, and C
        double sum = Arrays.stream(features).sum();
        
        if (sum < 10) {
            return "Class A";
        } else if (sum < 20) {
            return "Class B";
        } else {
            return "Class C";
        }
    }

    public static void main(String[] args) {
        // Example feature sets for classification
        double[][] data = {
            {2.5, 3.0, 1.0},  // This might belong to Class A
            {6.5, 7.0, 2.0},  // This might belong to Class B
            {12.0, 8.5, 3.5}  // This might belong to Class C
        };

        // Loop through the data and classify each set of features
        for (int i = 0; i < data.length; i++) {
            String result = classify(data[i]);
            System.out.println("Data set " + (i+1) + " classified as: " + result);
        }
    }
}

===========================================================================================
EXPERIMENT NO 06

// Interface for Stack operations
interface StackInterface {
    void push(int element);
    int pop();
    int peek();
    void displayStack();
}

// Interface for Queue operations
interface QueueInterface {
    void enqueue(int element);
    int dequeue();
    void displayQueue();
}

// Class implementing both Stack and Queue interfaces
class StackQueue implements StackInterface, QueueInterface {
    private int[] stack = new int[10];
    private int[] queue = new int[10];
    private int top = -1;
    private int front = 0;
    private int rear = -1;

    // Stack methods
    public void push(int element) {
        if (top < stack.length - 1) {
            stack[++top] = element;
            System.out.println(element + " pushed to stack.");
        } else {
            System.out.println("Stack is full!");
        }
    }

    public int pop() {
        if (top >= 0) {
            int poppedElement = stack[top--];
            System.out.println(poppedElement + " popped from stack.");
            return poppedElement;
        } else {
            System.out.println("Stack is empty!");
            return -1;
        }
    }

    public int peek() {
        if (top >= 0) {
            return stack[top];
        } else {
            System.out.println("Stack is empty!");
            return -1;
        }
    }

    public void displayStack() {
        if (top >= 0) {
            System.out.print("Stack elements: ");
            for (int i = 0; i <= top; i++) {
                System.out.print(stack[i] + " ");
            }
            System.out.println();
        } else {
            System.out.println("Stack is empty!");
        }
    }

    // Queue methods
    public void enqueue(int element) {
        if (rear < queue.length - 1) {
            queue[++rear] = element;
            System.out.println(element + " enqueued to queue.");
        } else {
            System.out.println("Queue is full!");
        }
    }

    public int dequeue() {
        if (front <= rear) {
            int dequeuedElement = queue[front++];
            System.out.println(dequeuedElement + " dequeued from queue.");
            return dequeuedElement;
        } else {
            System.out.println("Queue is empty!");
            return -1;
        }
    }

    public void displayQueue() {
        if (front <= rear) {
            System.out.print("Queue elements: ");
            for (int i = front; i <= rear; i++) {
                System.out.print(queue[i] + " ");
            }
            System.out.println();
        } else {
            System.out.println("Queue is empty!");
        }
    }
}

// Test class
public class StackQueueTest {
    public static void main(String[] args) {
        StackQueue sq = new StackQueue();

        // Stack operations
        sq.push(10);
        sq.push(20);
        sq.displayStack();
        sq.pop();
        sq.displayStack();

        // Queue operations
        sq.enqueue(30);
        sq.enqueue(40);
        sq.displayQueue();
        sq.dequeue();
        sq.displayQueue();
    }
}


===========================================================================================
EXPERIMENT NO 07
1.Trigonometric Operations Class (Trig.java)

package MyMath;

public class Trig {
    private double angle;

    public Trig(double angle) {
        this.angle = Math.toRadians(angle);  // Convert degrees to radians
    }

    public double getSine() {
        return Math.sin(angle);
    }

    public double getCosine() {
        return Math.cos(angle);
    }

    public double getTangent() {
        return Math.tan(angle);
    }

    public double getSecant() {
        return 1 / Math.cos(angle);
    }

    public double getCosecant() {
        return 1 / Math.sin(angle);
    }

    public double getCotangent() {
        return 1 / Math.tan(angle);
    }
}
-------------------------------------------------------------------------------------------
2.Arithmetic Operations Class (Arithmetic.java)


package MyMath;

public class Arithmetic {
    
    public float add(float a, float b) {
        return a + b;
    }

    public float subtract(float a, float b) {
        return a - b;
    }

    public float multiply(float a, float b) {
        return a * b;
    }

    public float divide(float a, float b) {
        if (b != 0) {
            return a / b;
        } else {
            System.out.println("Division by zero is not allowed.");
            return 0;
        }
    }
}

-------------------------------------------------------------------------------------------
3.Statistical Operations Class (Stat.java)

package MyMath;

public class Stat {
    
    public float min(float[] numbers) {
        float min = numbers[0];
        for (float num : numbers) {
            if (num < min) {
                min = num;
            }
        }
        return min;
    }

    public float max(float[] numbers) {
        float max = numbers[0];
        for (float num : numbers) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }

    public int count(float[] numbers) {
        return numbers.length;
    }

    public float sum(float[] numbers) {
        float sum = 0;
        for (float num : numbers) {
            sum += num;
        }
        return sum;
    }

    public float average(float[] numbers) {
        return sum(numbers) / count(numbers);
    }
}

===========================================================================================
 	EXPERIMENT NO 08

// Step 1: Create custom exceptions for each specific case
class TooLongAdditionException extends Exception {
    public TooLongAdditionException(String message) {
        super(message);
    }
}

class NegativeAnswerException extends Exception {
    public NegativeAnswerException(String message) {
        super(message);
    }
}

class TooLongMultiplicationException extends Exception {
    public TooLongMultiplicationException(String message) {
        super(message);
    }
}

// Step 2: Create the Operation class with two integer members and methods for add, subtract, multiply, and divide
class Operation {
    private int num1;
    private int num2;

    // Constructor to initialize the two numbers
    public Operation(int num1, int num2) {
        this.num1 = num1;
        this.num2 = num2;
    }

    // Method for addition with exception handling for addition > 1000
    public int add() throws TooLongAdditionException {
        int result = num1 + num2;
        if (result > 1000) {
            throw new TooLongAdditionException("Addition exceeds 1000: " + result);
        }
        return result;
    }

    // Method for subtraction with exception handling for result < 0
    public int subtract() throws NegativeAnswerException {
        int result = num1 - num2;
        if (result < 0) {
            throw new NegativeAnswerException("Subtraction resulted in negative answer: " + result);
        }
        return result;
    }

    // Method for multiplication with exception handling for multiplication > 5000
    public int multiply() throws TooLongMultiplicationException {
        int result = num1 * num2;
        if (result > 5000) {
            throw new TooLongMultiplicationException("Multiplication exceeds 5000: " + result);
        }
        return result;
    }

    // Method for division (no specific exception required, but handle division by zero)
    public int divide() {
        if (num2 == 0) {
            throw new ArithmeticException("Division by zero is not allowed");
        }
        return num1 / num2;
    }
}

public class Main {
    public static void main(String[] args) {
        // Create an object of Operation with two numbers
        Operation op = new Operation(500, 600);

        try {
            // Perform addition
            System.out.println("Addition: " + op.add());
        } catch (TooLongAdditionException e) {
            System.out.println(e.getMessage());
        }

        try {
            // Perform subtraction
            System.out.println("Subtraction: " + op.subtract());
        } catch (NegativeAnswerException e) {
            System.out.println(e.getMessage());
        }

        try {
            // Perform multiplication
            System.out.println("Multiplication: " + op.multiply());
        } catch (TooLongMultiplicationException e) {
            System.out.println(e.getMessage());
        }

        try {
            // Perform division
            System.out.println("Division: " + op.divide());
        } catch (ArithmeticException e) {
            System.out.println(e.getMessage());
        }
    }
}